/*
 * tk_wo1602g.h

 *  Created on: 14 лист. 2017 р.
 *  Author: Alexander Olenyev (alexandes.zp@gmail.com) & Volodymyr.Kozak (volodymyr@kozak@gmail.com)
 ******************************************************************************************************************/
/* БІБЛІОТЕКА ФУНКЦІЙ ДЛЯ ДИСПЛЕЯ WO1602G
 *
 * Реалізовано не всі, передбачені  WO1602G, режими роботи з керуванням по I2C.
 * Реалізовано режим роботи:
 * 	ініціалізація для 3В логіки (нар.STM32),
 * 	дисплей налаштовано на роботу з шрифтом 5х8,
 * 	экран форматовано як два рядки,
 * 	невидимий курсор зсувається вправо після друку чергового знаку
 * Забезпечується друк кириличних символів російської і української абеток, крім літери "єЄ" (поки що друкується еЕ)
 * Показчик (рос.указатель) на хендлер I2C та адреса I2C slave дисплеє задаються при ініціалізації.
 * Ймовірно, адреса I2C, задана виробником - 0х3Е, для сканування адреси - використовуйте функцію I2C_ScanBus();
 * Не підтримуєть робота з декількома екранами одночасно.
 * */
#include "../1_PROJECT/tkConfig.h"
#ifdef WINSTAR_Display_WO1602G

#ifndef TK_WO1602G_H_
#define TK_WO1602G_H_

#include "stdint.h"
#include "i2c.h"

// LCD Commands
#define LCD_CLEARDISPLAY        0x01
#define LCD_RETURNHOME          0x02
#define LCD_ENTRYMODESET        0x04
#define LCD_DISPLAYCONTROL      0x08
#define LCD_CURSORSHIFT         0x10
#define LCD_FUNCTIONSET         0x20
#define WO1602G_CGRAM_ADDR      0x40
#define WO1602G_DDRAM_ADDR      0x80

// flags for display on/off and cursor control
// ---------------------------------------------------------------------------
#define LCD_DISPLAYON           0x04
#define LCD_DISPLAYOFF          0x00
#define LCD_CURSORON            0x02
#define LCD_CURSOROFF           0x00
#define LCD_BLINKON             0x01
#define LCD_BLINKOFF            0x00


/*******************************************************************************************************************
 *******************************************************************************************************************
 *     P U B L I C    V A R I A B L E S
 *******************************************************************************************************************
*/

typedef enum {                   	/* Статус, коди завершення функцій бібліотеки 									*/
	WO1602G_OK,						/* OK, без коментарів															*/
	WO1602G_UNKNOWN_Err,			/* невизначена помилка 															*/
	WO1602G_I2C_Err,				/* помилка транспортування даних по I2C 										*/
	WO1602G_BUSY,
	WO1602G_WRONG_Arg,				/* на вході функції некоректні аргументи, отже і функції щось робила некоректно */
	WO1602G_NULL_Ptr,				/* нульовий показчик (рос. - указатель), аврійне припинення роботи 				*/
	WO1602G_Err						/* помилка при виконання функції, щось не так.. 								*/
} wo1602g_status_t;


/*******************************************************************************************************************
 *******************************************************************************************************************
 *     P U B L I C   F U N C T I O N S
 *******************************************************************************************************************
*/
/*******************************************************************************************************************
 *******************************************************************************************************************
 *     І Н І Ц І А Л І З А Ц І Я    WO1602G
 *******************************************************************************************************************
Ініціалізація wo1602g - послідовність інструкцій строго у відповідності до рекомендацій
https://www.google.com.ua/url?sa=t&rct=j&q=&esrc=s&source=web&cd=2&ved=0ahUKEwjJybbOqMLXAhXDVxoKHaV5ByMQFggtMAE&url=http%3A%2F%2Fbiakom.com%2Fpdf%2Fwo1602g-yyh-ct_Winstar.pdf&usg=AOvVaw331bZtHQjKDcXgZc0cMr9E
стор.12
Послідовнсть інструкцій ініціалізації коректна для 3В логіки. Для 5В логіки - див. документ вище
Дисплей налаштовано на роботу з шрифтом 5х8,
экран форматовано як два рядки,
невидимий курсор зсувається вправо після друку чергового знаку
*/

wo1602g_status_t WO1602_Init(I2C_HandleTypeDef *hi2c, uint8_t devAddr);


/*******************************************************************************************************************
 *******************************************************************************************************************
 *     ДРУК ВЕРХНЬОГО РЯДКА    WO1602G
 *******************************************************************************************************************
забезпечує друк верхнього рядка дисплея 16 символів
будь які дані повинні перед друком бути перетворені у рядок 16 символів
якщо символів більше 16 - виводиться лише 16, причому всі лишні символи друкуються на 16 позиції, це помилка
якщо символів менше 16 - видяться всі символи, при цьому на екрані залишаються раніше надруковані символи
Рекомендуємо виводити попердньо сформований рядок 16 символів.
*/

wo1602g_status_t  WO1602_WriteHighString (uint8_t *str);

/*******************************************************************************************************************
 *******************************************************************************************************************
 *     ДРУК НИЖНЬОГО РЯДКА    WO1602G
 *******************************************************************************************************************
забезпечує друк нижнього рядка дисплея 16 символів
будь які дані повинні перед друком бути перетворені у рядок 16 символів
якщо символів більше 16 - виводиться лише 16, причому всі лишні символи друкуються на 16 позиції, це помилка
якщо символів менше 16 - видяться всі символи, при цьому на екрані залишаються раніше надруковані символи
Рекомендуємо виводити попердньо сформований рядок 16 символів.
*/
wo1602g_status_t  WO1602_WriteLowString (uint8_t *str);

/*******************************************************************************************************************
 *******************************************************************************************************************
 *     ЗТИРАННЯ ЕКРАНА    WO1602G
 *******************************************************************************************************************
Екран стирається. Курсор (невидимий) - у верхньому лівому куту екрана
*/
wo1602g_status_t WO1602_ClearScreen (void);

/*******************************************************************************************************************
 *******************************************************************************************************************
 *     ПЕРЕМІЩЕННЯ КУРСОРА НА ЗАДАНУ ПОЗИЦІЮ   WO1602G
 *******************************************************************************************************************
Курсор переміщується на позицію у = 0 - верхнй рядок, х=0 - крайнє ліве знакомісце
Екран не стирається
Рекомендуємо використовувати спільно з функцією WO1602_WriteChar при необхыдносты друкувати не весь рядок, а лише
окремі позиції заданого рядка
Якщо номер рядка і номер знакомісця задані некорекно, функція працює некоректно і повертає сигнал про помилку
*/
wo1602g_status_t WO1602_SetCursor(uint8_t x, uint8_t y);

/*******************************************************************************************************************
 *******************************************************************************************************************
 *     ДРУК ОДНОГО СИМВОЛА   WO1602G
 *******************************************************************************************************************
Друкується один заданий символ на позиції, заданій функцією WO1602_SetCursor, або на позиції, спава від попередньо
 надрукованого символа
Рекомендуємо використовувати  при необхідносты друкувати не весь рядок, а лише
окремі позиції заданого рядка
Якщо номер рядка і номер знакомісця задані некорекно, функція працює некоректно і повертає сигнал про помилку
*/
wo1602g_status_t WO1602_WriteChar(uint8_t ch);




wo1602g_status_t  WO1602_CreateCustomCharacter(
											   uint8_t *pucPattern, /* масив з 8 байт для символа користувача
											   	   	   	   	   	   	   наприклад, для української 'Є' {
											    						***01110							0x0E
											    						***10001							0x11
											    						***10000							0x10
											    						***11100							0x1C
											    						***10000							0x10
											    						***10001							0x11
											    						***01110							0x0E
											    						***00000							0x00 }*/
											   uint8_t  cLocation     /*0..7 - порядковий номер одного з восьми символів користувача */
											   );













/*******************************************************************************************************************
 *******************************************************************************************************************
 *     P R I V A T E     F U N C T I O N S
 *******************************************************************************************************************
*/


#endif /* TK_WO1602G_H_ */

#endif //WINSTAR_Display_WO1602G
/*Hex value to create the pattern (Arrow)*/
//	uint8_t aucPattern1[8] = {0x00,0x04,0x08,0x1f,0x08,0x04,0x00,0x00};
//	/*Hex value to create the pattern (betel leaf)*/
//	uint8_t aucPattern2[8]=  {0x00,0x1b,0x15,0x11,0x0a,0x04,0x00,0x00};
//	uint8_t aucPattern3[8]=  {0x0E,0x11,0x10,0x1C,0x10,0x11,0x0E,0x00};
//
//
//
//	wo1602g_status = WO1602_Init(&hi2c1, 0x3E);
//
//
//	WO1602_CreateCustomCharacter(aucPattern1,0); /*Create arrow at 0th location of CGRAM*/
//	WO1602_CreateCustomCharacter(aucPattern2,1);
//	WO1602_CreateCustomCharacter(aucPattern3,2);
//
//
//wo1602g_status = WO1602_Init(&hi2c1, 0x3E);
//wo1602g_status = WO1602_ClearScreen ();
//
//	wo1602g_status = WO1602_SetCursor(0, 0);
//	wo1602g_status = WO1602_WriteChar('P');
//	wo1602g_status = WO1602_WriteChar(0x30);
//	wo1602g_status = WO1602_WriteChar(0x31);
//	wo1602g_status = WO1602_WriteChar(0x32);
//	wo1602g_status = WO1602_WriteChar(0x33);
//	wo1602g_status = WO1602_WriteChar(0x00);
//	wo1602g_status = WO1602_WriteChar(0x01);
//	wo1602g_status = WO1602_WriteChar(0x02);
//	wo1602g_status = WO1602_WriteChar(0x03);
//	wo1602g_status = WO1602_WriteChar(0x20);
//	wo1602g_status = WO1602_WriteChar(0x21);
//	wo1602g_status = WO1602_WriteChar(0x22);
//	wo1602g_status = WO1602_WriteChar(0x33);
//
//	WO1602_noDisplay();
//
//	WO1602_display();
//
//
//	// Turns the underline cursor on/off
//	WO1602_noCursor();
//
//	WO1602_cursor();
//
//
//	// Turns on/off the blinking cursor
//	WO1602_noBlink();
//
//
//	WO1602_blink();
//
//
//
//
//
//
//
//	wo1602g_status = WO1602_WriteChar('P');
//	wo1602g_status = WO1602_WriteChar('P');
//
//
//
//	wo1602g_status = WO1602_Init(&hi2c1, 0x3E);
//
//	wo1602g_status = WO1602_SetCursor(4, 0);
//	wo1602g_status = WO1602_WriteChar('P');
//	wo1602g_status = WO1602_WriteChar(0x00);
//	wo1602g_status = WO1602_WriteChar(0x01);
//	wo1602g_status = WO1602_WriteChar(0x02);
//	wo1602g_status = WO1602_WriteChar(0x03);
//	wo1602g_status = WO1602_WriteChar('E');
//wo1602g_status=WO1602_WriteHighString   ("ЙЦУКЕНГШЩЗХЪЭЖДЛ");
//	if (wo1602g_status != WO1602G_OK){
//		Error_Handler();
//	}
////		HAL_Delay (2000);
//	wo1602g_status=	WO1602_WriteLowString  	("йцукенгшщзхъэждл");
//	if (wo1602g_status != WO1602G_OK){
//			Error_Handler();
//	}
//	HAL_Delay (2000);
//	wo1602g_status = WO1602_ClearScreen ();
//	HAL_Delay (2000);
//	wo1602g_status=	WO1602_WriteHighString 	("ОРПАВЫФЯЧСМИТЬБЮ");
//	if (wo1602g_status != WO1602G_OK){
//			Error_Handler();
//	}
////		HAL_Delay (2000);
//	wo1602g_status=	WO1602_WriteLowString  	("орпавыфячсмитьбю");
//	if (wo1602g_status != WO1602G_OK){
//				Error_Handler();
//	}
//	HAL_Delay (2000);
//	wo1602g_status = WO1602_ClearScreen ();
//	HAL_Delay (2000);
//	wo1602g_status=	WO1602_WriteHighString 	("їЇіІиИЄє");
//	if (wo1602g_status != WO1602G_OK){
//			Error_Handler();
//	}
////		HAL_Delay (2000);
//	wo1602g_status = WO1602_ClearScreen ();
//	wo1602g_status=WO1602_WriteHighString   ("Напруга 220В");
//	if (wo1602g_status != WO1602G_OK){
//		Error_Handler();
//	}
//	wo1602g_status=	WO1602_WriteLowString  	("Струм 134.5А");
//	if (wo1602g_status != WO1602G_OK){
//		Error_Handler();
//	}
////		HAL_Delay (2000);
//	wo1602g_status = WO1602_ClearScreen ();
////		HAL_Delay (2000);
//
//	//The C library function int sprintf(char *str, const char *format, ...)
//	uint8_t printed_str [8]={0};
//
////		uint32_t secs=0; uint32_t mins=0; uint32_t hours=0;
////		for (uint32_t i_out=0; i_out<1000000;++i_out) {
////			HAL_Delay (200);
////			++secs;
////			if (secs==60){secs=0;++mins;};
////			if (mins==60){mins=0;++hours;};
////			if (hours==24){hours=0;};
////			wo1602g_status = WO1602_SetCursor(4, 0);
////			sprintf (&printed_str, "%2d.%2d.%2d", hours,mins,secs);
////			for (uint8_t j=0;j<8;++j) {
////				wo1602g_status = WO1602_WriteChar(printed_str[j]);
////			}
////		}
